import java.text.SimpleDateFormat

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'kotlin-kapt'
}

android {
    namespace 'com.flexa'
    compileSdk rootProject.compileSdk

    defaultConfig {
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'r8-rules.pro', 'r8-gson.pro', 'identity-r8-rules.pro', 'kotlin-serializer-rules.pro'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'r8-rules.pro', 'r8-gson.pro', 'identity-r8-rules.pro', 'kotlin-serializer-rules.pro'
        }
        debug {
        }
    }
    def date = new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    buildTypes.each {
        it.buildConfigField 'String', 'RELEASE_DATE', "\"${date}\""
        it.buildConfigField 'String', 'SPEND_SDK_VERSION', "\"${rootProject.core_version}\""
        it.buildConfigField 'String', 'DEBUG_API_HOST', "\"${localProperties['debug.api.host']?:""}\""
        it.buildConfigField 'String', 'USE_DEBUG_API_HOST', "\"${localProperties['use.debug.api.host']?:null}\""
    }
    compileOptions {
        sourceCompatibility rootProject.sourceCompatibility
        targetCompatibility rootProject.targetCompatibility
    }
    kotlinOptions {
        jvmTarget = rootProject.jvmTarget
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion kotlin_compiler_version
    }
    sourceSets {
        main {
            kotlin {
                srcDir("$buildDir/generated/api")
            }
        }
    }
    gradle.taskGraph.whenReady {
        def task = it.getAllTasks().find { t -> t.name.contains('bundle') }
        if (task && task.name && (
                task.name.contains('Release') ||
                        task.name.contains('Debug')
        )) {
            def propertiesFile = file('build_type.properties')
            if (!propertiesFile.canRead()) {
                throw new FileNotFoundException("Could not read " + propertiesFile.name)
            }
            Properties properties = new Properties()
            properties.load(new FileInputStream(propertiesFile))
            def type = properties['BUILD_TYPE']
            def currentType
            if (task.name.contains('Release')) {
                currentType = 'release'
            } else if (task.name.contains('Debug')) {
                currentType = 'debug'
            }
            if (currentType && type != currentType) {
                properties['BUILD_TYPE'] = currentType
                properties.store(propertiesFile.newWriter(), null)
                println "Recorded Build Type --->>> $currentType"
            }
        }
    }
}

dependencies {
    implementation "androidx.core:core-ktx:$core_ktx"

    /*Compose*/
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$material_version"
    implementation "androidx.compose.material3:material3:$material3_version"
    implementation "androidx.activity:activity-compose:$activity_compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.navigation:navigation-compose:$navigation_compose_version"
    debugImplementation "androidx.customview:customview-poolingcontainer:$customview_poolingcontainer_version"
    debugImplementation "androidx.customview:customview:$customview_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "androidx.webkit:webkit:$webkit_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"


    /*AppCompat*/
    implementation 'androidx.appcompat:appcompat:1.7.0'

    /*Image*/
    implementation 'io.coil-kt:coil-compose:2.7.0'

    /*Time*/
    implementation 'joda-time:joda-time:2.12.7'

    /*OkHttp*/
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.12.0"
    implementation "com.squareup.okhttp3:okhttp-sse:4.12.0"

    /*Security*/
    implementation 'androidx.security:security-crypto:1.0.0'
    implementation "com.google.crypto.tink:tink-android:1.8.0"

    /*Serialization*/
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3'

    /*Database*/
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation 'org.robolectric:robolectric:4.13'
}

project.afterEvaluate {
    publishing {
        publications {
            def artifactName = project.name
            library(MavenPublication) {
                groupId rootProject.groupId
                artifactId artifactName
                version rootProject.core_version
                def propertiesFile = file('build_type.properties')
                if (!propertiesFile.canRead()) {
                    throw new FileNotFoundException("Could not read " + propertiesFile.name)
                }
                Properties properties = new Properties()
                properties.load(new FileInputStream(propertiesFile))
                def type = properties['BUILD_TYPE']
                println '<<<--- Building library --->>> ' + type
                artifact "$buildDir/outputs/aar/${artifactName}-${type}.aar"
                pom.withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    configurations.each {
                        if (it.name == 'api' || it.name == 'implementation') {
                            configurations[it.name].allDependencies.forEach {
                                if (it.group != null && (it.name != null || "unspecified" == it.name)
                                        && it.version != null && "unspecified" != it.version) {
                                    println 'dep -->>> ' + it.group + ':' + it.name + ':' + it.version
                                    def dependencyNode = dependenciesNode.appendNode("dependency")
                                    dependencyNode.appendNode("groupId", it.group)
                                    dependencyNode.appendNode("artifactId", it.name)
                                    dependencyNode.appendNode("version", it.version)
                                }
                            }
                        }
                    }
                }
            }
            bar(MavenPublication) {
                groupId rootProject.groupId
                artifactId artifactName
                version rootProject.core_version
                def propertiesFile = file('build_type.properties')
                if (!propertiesFile.canRead()) {
                    throw new FileNotFoundException("Could not read " + propertiesFile.name)
                }
                Properties properties = new Properties()
                properties.load(new FileInputStream(propertiesFile))
                def type = properties['BUILD_TYPE']
                println '<<<--- Building library --->>> ' + type
                artifact "$buildDir/outputs/aar/${artifactName}-${type}.aar"
                pom.withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    configurations.each {
                        if (it.name == 'api' || it.name == 'implementation') {
                            configurations[it.name].allDependencies.forEach {
                                if (it.group != null && (it.name != null || "unspecified" == it.name)
                                        && it.version != null && "unspecified" != it.version) {
                                    println 'dep -->>> ' + it.group + ':' + it.name + ':' + it.version
                                    def dependencyNode = dependenciesNode.appendNode("dependency")
                                    dependencyNode.appendNode("groupId", it.group)
                                    dependencyNode.appendNode("artifactId", it.name)
                                    dependencyNode.appendNode("version", it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/flexa/flexa-android")
                credentials {
                    def propertiesFile = rootProject.file("local.properties")
                    def localProperties = new Properties()
                    localProperties.load(new FileInputStream(propertiesFile))
                    username = localProperties['gpr.user'] ?: ""
                    password = localProperties['gpr.key'] ?: ""
                }
            }
        }
    }
}
